// map
// _fn _0 then [] else (_1 (HD _0)) :: (_2 (TL _0));;

// let _1 = (fix (λ λ λ ifn _0 then [] else (_1 (HD _0)) :: (_2 _1 (TL _0)))) in _1;; e;

let _1 = (fix (λ λ λ ifn _0 then [] else (_1 (HD _0)) :: (_2 _1 (TL _0)))) in
let _0 = λ 2 * _0 in
_1 _0 [5;10;2];;

// let _1 = (fix (λ λ λ ifn _0 then [] else (_1 (HD _0)) :: (_2 _1 (TL _0)))) in
// let _0 = λ 2 * _0 in
// let _2 = _1 _0 [10;2] in
// HD TL _2;;

