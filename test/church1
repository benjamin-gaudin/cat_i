// let t1 = Abs (Abs (App (Var 1, Var 0)))
// Abs (Abs (Abs (Abs (App (App (Var 3, Var 1), (App (App(Var 2, Var 1), Var 0))))))) *)
// let t1_add_1 : pterm = App (App (tadd, t1), t1)

// add λ λ λ λ (3 1) (2 1 0)
// (λ λ λ λ (3 1) (2 1 0)) (λ λ 1 0) (λ λ 1 0);;

// (λ λ λ λ (i3 i1) (i2 i1 i0)) (λ λ i1 i0) (λ λ i1 i0);;

// (1+1) + (1+1)
// (λ λ λ λ (i3 i1) (i2 i1 i0)) ((λ λ λ λ (i3 i1) (i2 i1 i0)) (λ λ i1 i0) (λ λ i1 i0)) ((λ λ λ λ (i3 i1) (i2 i1 i0)) (λ λ i1 i0) (λ λ i1 i0));;

// ((λ λ i1 i1 i2) i3) i4;;
// λ λ (1 0 1 2) 3 4;;
// λ λ λ 2 0 (1 0);;
// λ λ λ (2 0) (1 0);;
// (λ λ 0 0) (λ 0) (λ λ 1 0);;
// λ λ 1 0;;

// (λ λ i1 i0) (λ i0) (λ i0);;
// λ λ i1 i0 (λ i0) (λ i0);
// λ λ i1 i0 λ i0 λ i0;;

// S K K
// (λ  λ  λ  (i2 i0) (i1 i0)) (λ λ i1) (λ λ i1) (1 + 2 * 3);;
// (λ  λ  λ  (i2 i0) (i1 i0)) (λ λ i1) (λ λ i1);;
// (λ  λ  λ  (2 0) (1 0)) (λ λ 1) (λ λ 1) (λ 0);;

// (λ i0 i0);;
// ( 2 * 3 + 4);;
// ( 2 + 3 * 4);;
// (λ i0 i0) ( 1 + (2 * 3));;
// (λ λ i0 + i1) 3 i4;;
// (λ λ i0 * i1) 3 4;;

// (λ i0 i1) (λ i0 i0);;
// (λ i1) 1;;
// (λ λ i1) 2 i1;;
// i2 i1;;
// 1 + 1;;
// 3 + 5 * 2;;
// 3 * 5 + 2;;

// HD [1];;
// [1 ; 2 ; 4];;
// [λ i0 ; (λ  λ  λ  (i2 i0) (i1 i0)) (λ λ i1) (λ λ i1) ; (λ i0) (λ i0)];;

// [[1;2]; [3;4]];;
// HD [[1;2]; [3;4]];;
// TL [[1;2]; [3;4]];;

// [λ λ 1; λ 0];;
// (1 :: [2]);;
// (λ ((HD i0) :: (HD (TL i0)))) (1 :: [2]);;

// [];;

// ifz 0 then λ i0  else (λ  λ  λ  (i2 i0) (i1 i0)) (λ λ i1) (λ λ i1);;
// ifz 1 then λ i0  else (λ  λ  λ  (i2 i0) (i1 i0)) (λ λ i1) (λ λ i1);;
// λ ifz i0 then 0 else 6;;
// λ i1;;
// ifz i0 then 0 else 4;;
// λ ifn i0 then 0 else 1;;
// ifn [] then 0 else 2;;
// ifn [2 ; 3] then 0 else 3;;

// add
// fix (λϕ.λn1 n2.ifz n1 n2 (S (ϕ (P n1) n2))))
// fix (λ λ λ ifz i1 i0 (1 + (i2 (i1 - 1) i1));;
// (fix (λ λ λ ifz i1 i0 (1 + (i2 (i1 - 1) i1))) 1 1;;


// (fix (λ λ ifz i0 then 0 else 1)) 3;;
// ((fix (λ λ ifz i0 then 0 else i1 - 1)) 3) + 2;;
// (fix (λ λ ifz i0 then 10 else i1 (i0 - 1))) 3;;

// fix (λ λ ifz i0 then 1 else i0 * (i1 (i0 - 1)));;
// (fix (λ λ ifz i0 then 1 else i0 * (i1 (i0 - 1)))) 4;;

// 2;; e;
// let i1 = 2 in i1;;
// let i0 = λ i0 in i0 i0;;
// let i0 = λ i0 in (i0 i0) 2;; -e;


// let i0 = λ i0 in i0 i0;; e;

// let i0 = (λ i0 i0) (λ i0 i0) in i0;;

// let i0 = true && false || true in i0 && true;;

let i0 = true && false || true in if i0 && false then true else false;;

